info() {
    if [ -n "$RELAY_DEBUG" ]
    then
        echo "$@" >&2
    fi
}

info
info

while [ $# -gt 0 ]
do
    case $1 in
        --build-dir)
            BUILD_DIR=$2
            shift 2
            ;;
        --command-file)
            CMD_FILE=$2
            shift 2
            ;;
        --target)
            TARGET=$2
            shift 2
            ;;
        --prerequisites)
            shift 1
            while [ $# -gt 0 ]
            do
                case $1 in
                    --)
                        shift 1
                        break
                        ;;
                    *)
                        PREREQS="$PREREQS $1"
                        shift 1
                        ;;
                esac
            done
            ;;
        --phony)
            shift 1
            PHONY=True
            ;;
        *)
            break
            ;;
    esac
done
info Making "$TARGET" with command "$@", with updated prereqs "$PREREQS",\
 putting command into "$CMD_FILE", build dir is "$BUILD_DIR"

if [ "$PHONY" = "True" ]
then
    info We\'re building phony target
fi

if [ "$PHONY" != "True" ]
then
    info Determining if prerequisites are really out of date

    NEEDS_UPDATE=False
    for p in $PREREQS
    do
        HASH_FILE="$BUILD_DIR/$p.hash"
        if [ -f "$HASH_FILE" ]
        then
            if ! shasum -s -c "$HASH_FILE"
            then
                NEEDS_UPDATE=True
                info "$p" is out of date
                break
            fi
        else
            info Hash of "$p" doesn\'t exist
            NEEDS_UPDATE=True
            break
        fi
    done

    if [ $NEEDS_UPDATE = 'False' ] && [ -e $TARGET ]
    then
        info Nothing needs to be updated, exiting
        exit 0
    fi
fi

for p in $PREREQS
do
    HASH_FILE="$BUILD_DIR/$p.hash"
    info -n Calculating hash for prerequisite "$p" ...
    mkdir -p $(dirname "$HASH_FILE")
    shasum -p "$p" > "$HASH_FILE"
    info Saved to "$HASH_FILE"
done

CMD="$@"
if [ ! -z $CMD_FILE ]
then
    echo "$CMD" > $CMD_FILE
fi

info Resulting CMD: "$CMD"

set -e
eval "$CMD" $REDIRECT
set +e
